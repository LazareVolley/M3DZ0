Задача №1. Описание Домашних животных

struct Animal:
    name: str,
    type: str,
    age: int,
    weight: float,
    vaccination: bool

Например:

Parrot = Animal("Kesha", "bird", 5, 1.2, True)
Dolphin = Animal("", "fish", 24 ,243.11, False)
Makaka = Animal("ChiChiChi", "Monkey", 10, 28.7, True)
Gaduka = Animal("Djafar", "Snake", 1, 4.97, False)

Задача №2. "Ритуалы и традиции в волшебном обществе"

struct Artefact:
    stuff: str, #материал, из которого изготовлен артефакт
    historical_meaning: str, #историческое значение артефакта
    streight: float #сила артефакта

struct Ritual_date:
    day: int, #день, в который проходит ритуал
    mounth: int, #месяц, в который проходит ритуал
    year: int #год, в который проходит ритуал

struct Villager:
    role: str, #роль члена общества
    cloth:, str, #одежда члена общества
    social_class: str, #общественный слой члена общества
    artifact: struct #артефакт, принадлежащий члену общества

struct Main_villagers:
    name: str #имя ключевой сущности / члена общества

1. Определить ключевые сущности в ритуалах и традициях этого волшебного общества:

Villager1 = Main_villagers("Dmitriy_Rak")
Villager2 = Main_villagers("Jurabek")
Villager3 = Main_villagers("Nedoprogrammist")

2. Опишите детально каждую сущность, учитывая предоставленные характеристики:

Villager1 = Villager("Имеет высший авторитет и является духовным лидером общества, принимает важные решения и решает споры между членами общества", "Темный костюм с накидкой из синего бархата", "Magic_Ministr", Книга заклинаний)
Villager2 = Villager("Отвечает за проведение магических ритуалов и церемоний, обладает обширным знанием о мистических силами", "Длинный плащ из черного бархата", "Magic_Senior", Планшет всесилия)
Villager3 = Villager("Обеспечивает руководство и стратегическое направление для всего общества", "Костюм из золотистого шелка", "Caster", Прямая рука)

3. Анализ, как сущности взаимодействуют друг с другом во время ритуалов:

Во время ритуалов сущность 'Nedoprogrammist' тратит всю энергию (или её часть) на изучение нового материала, сущность 'Jurabek' помогает сущности 'Nedoprogrammist' кастуя баффы при помощи Artefact('Планшет всесилия'). Сущность 'Dmitriy_Rak' регулирует весь процесс, направляя отряд при помоищи Artefact('Книга заклинаний').

*Сущность 'Nedoprogrammist' может использовать Artefact('Прямая рука') только один раз за ритуал. Результатом действия Artefact('Прямая рука') для сущности 'Nedoprogrammist' является: Ускорение обучения и применения навыков. Длительность: 30 минут.

Задача №3. "Городской фермерский рынок"

struct Stand:
    product_type: str

struct Farmer:
    name: str, #Никак не влияет, для покупателей и фермеров не имеет значения как зовут друг друга.
    age: int, #Влияет, например более взрослый фермер будет более опытным в своём деле, соотвественно качество товара может быть лучше или наоборот (опционально).
    products_range: list[str] #Влияет, ассортимент продуктов позволяет покупателю выбрать больше товаров у одного продавца, поднимая тем самым выручку одного продавца, нежели он бы ушёл к другому.

struct Item:
    name: str, #Никак не влияет, для покупателей и фермеров не имеет значения как называется предмет.
    count: int, #Влияет только на возможность или невозможность продажи данного товара.
    manufacturing_date: struct #Влияет, дата изготовления напрямую влияет на то, в каком вие будет находиться тот или иной товар (пригоден для продажи или нет (не обязательно еда и напитки)).

struct Shopper:
    name: str, #Никак не влияет, для покупателей и фермеров не имеет значения как зовут друг друга.
    age: int, #Влияет, например если несовершеннолетний покупатель (Shopper(age) < 18), захочет приобрести напиток или зелье, которое предназначено только для совершеннолетних покупателей, сделать это не получится.
    demography: str, #Никак не влияет, для покупателей и фермеров не имеет значения откуда родом человек. (Опционально(Если нет политического строя)).
    product_preferences: list[str], #Влияет на выручку фермеров, чем больше предпочтений покупателя совпало с предложениями фермера, тем она будет больше и наоборот.
    cash_amount: int #Влияет на количество и разнообразие товаров, которое может приобрести покупатель.

1. Определить ключевые сущности, участвующие в деятельности городского фермерского рынка:

Farmer = ("Занимается сельским хозяйством, основной поставщик сельскохозяйственной продукции на рынках. "
           "Он предлагает сельскохозяйственную продукцию: свежие фрукты, овощи, зерно, молочные продукты и другие товары, которые необходимы для пропитания городского населения.")

Craftsman = ("Ремесленник также участвует на городском рынке, предлагая ручные изделия, украшения, продукцию ремесленных мастерских, одежду, обувь и другие товары. "
             "Их уникальные и качественные изделия дополняли ассортимент товаров на рынке и привлекали покупателей своим мастерством и оригинальным дизайном.")

Shopper = ("Жители города и окрестностей являлись ключевыми участниками городского фермерского рынка. "
           "Они приходили на рынок, чтобы приобретать свежие и качественные продукты, обмениваться товарами, покупать необходимые культурные и промышленные товары, "
           "а также социализироваться и общаться с другими участниками рынка.")

2. Описание для каждой сущности её структурных характеристик:

Farmer1 = Farmer("Vladimir", 48, list[str]("Овощи, Фрукты, Выпечка"))
Farmer2 = Farmer("Ivan", 20, list[str]("Скот, Книги, Сельскохозяйственные принадлежности, Овощи"))
Farmer3 = Farmer("Innokentiy", 71, list[str]("Фрукты, Выпечка, Броня, Зелья, Оружие"))

Shopper1 = Shopper("Jacob", 26, "Италия", list[str]("Оружие, Броня, Зелья"))
Shopper2 = Shopper("Teodor", 18, "Франция", list[str]("Фрукты, Книги, Пластинки, Сельскохозяйственные принадлежности"))
Shopper2 = Shopper("Maria", 31, "Россия", list[str]("Картины, Овощи, Выпечка, Ягоды, Скот"))


3. Анализ, как характеристики сущностей могут влиять на их взаимодействие и на общую атмосферу рынка:

Указаны под знаком '#' после характеристик в структурах.